{
    "collab_server" : "",
    "contents" : "mvtvnu <- function (\n  n = 1000000, \n  mean = rep(0, nrow(sigma)), \n  sigma = diag(length(mean)),\n  nu = rep(10, length(mean)),\n  cut = TRUE\n)\n{\n  ## input checks\n  if (length(nu) == 1) nu <- rep(nu, length(mean))\n  if ((length(mean) != length(diag(sigma))) | \n      (length(mean) != length(nu)) |\n      (length(nu) != length(diag(sigma)))) stop(\"'mu', 'nu' and 'sigma' need to be of same dimension!\")\n  eS <- eigen(sigma, symmetric = FALSE)\n  ev <- eS$values\n  if (!all(ev >= -1E-6 * abs(ev[1L]))) stop(\"'sigma' is not positive definite\")\n  \n  len <- length(mean)\n  n0 <- n\n  \n  ## convert diagonal variances by sigma_ii * (nu_ii - 2)/nu_ii\n  #cf <- (nu - 2)/nu\n  #Sigma[1, ] <- Sigma[1, ] * cf[1]\n  #diag(Sigma) <- diag(Sigma) * cf\n  \n  ## convert off-diagonal variances by sigma_ij * (nu_ii - 2)/nu_ii\n  #for (i in 1:(nrow(Sigma) -1)) {\n  #  for (j in ncol(Sigma):(i+1)) {\n  #    Sigma[i, j] <- Sigma[j, i] <- Sigma[i, j] * cf[i]\n  #  }\n  #}\n  \n  ## Cholesky decomposition of sigma\n  Chol <- chol(Sigma)\n  \n  ## sample from multivariate uncorrelated t-distribution(s)\n  X <- sapply(1:len, function(i) rt(n, nu[i]))\n  \n  ## create covariance structure\n  X <- X %*% Chol\n \n  ## add mean vector\n  X <- sweep(X, 2, mu, \"+\")\n  \n  ## optionally remove extreme points\n  if (cut) {\n    CUT <- apply(X, 2, function(x) quantile(x, c(5/n, 1-5/n), na.rm = TRUE))\n    for (i in 1:ncol(X)) {\n      SEL <- which(X[, i] < CUT[1, i] | X[, i] > CUT[2, i])\n      X[SEL, i] <- NA\n    }\n    X <- na.omit(X)\n    if (nrow(X) > n0) X <- X[1:n0, ]\n  }\n  \n  return(X)\n}\n\n####################################################\n\n#Sigma <- diag(7); \n#Sigma <- diag(c(0.5, 2, 0.2, 1, 4, 0.7, 1)) \n#Sigma[5, 3] <- Sigma[3, 5] <- 0.2\n#Sigma[5, 2] <- Sigma[2, 5] <- 0.3\n#Sigma[6, 3] <- Sigma[3, 6] <- 0.1\n#Sigma[6, 5] <- Sigma[5, 6] <- 0.5\n#mu <- c(10, 2, 20, 5, 0.5, 3, 1)\n#nu <- c(5, 10, 15, 20, 10, 12, 8)\n#nu <- c(1000, 1000, 1000)\n\n#Sigma <- diag(4); \nSigma <- diag(c(0.5, 2, 1, 4, 3))\n#Sigma <- diag(c(0.3, 1.5, 1, 3.98, 3))\nSigma[1, 2] <- Sigma[2, 1] <- 0.5\n#Sigma[1, 4] <- Sigma[4, 1] <- 0.2\n#Sigma[3, 4] <- Sigma[4, 3] <- 0.1\nmu <- c(10, 2, 20, 5, 15)\nnu <- c(5, 10, 15, 20, 10)\n#nu <- c(1000, 1000, 1000, 1000, 1000)\n#set.seed(123)\nres <- mvtvnu(n = 1000000, mean = mu, sigma = Sigma, nu = nu, cut = T)\n#plot(res[, 1:2], pch = 16, cex = 0.5, asp = 1)\ncov(res)\n#for (i in 1:ncol(res)) print(MASS:::fitdistr(res[, i], \"t\"))\n#library(rgl)\n#plot3d(res[, 1:3])",
    "created" : 1514722105869.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2218504680",
    "id" : "C28F4D0C",
    "lastKnownWriteTime" : 1514748821,
    "last_content_update" : 1514748821318,
    "path" : "C:/temp/mvt.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}