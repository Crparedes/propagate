hist(X, breaks = 1000)
hist(X, breaks = 10000)
X <- rmutil:::rlevy(1000000, 10, 1)
hist(X, breaks = 10000)
X <- rmutil:::rlevy(1000000, 0.1, 1)
hist(X, breaks = 10000)
X <- rmutil:::rlevy(1000000, 0.1, 0.1)
hist(X, breaks = 10000)
X <- rmutil:::rlevy(1000000, 0.1, 0.1)
X <- rmutil:::rlevy(1000000, 2, 2)
plot(density(X))
rlevy <- function(n, mu = 0, c = 5)
{
c/(qnorm(1 - runif(n)/2))^2 + mu
}
X <- rlevy(1000000, 2, 2)
hist(X, breaks = 10000)
dpareto <- funtion(x, s, l, g, m) ((l * ((x - m)/s)^(-1 + 1/g)) * (1 + ((x - m)/s)^(1/g))^(-1-l))/(g * s)
dpareto <- function(x, s, l, g, m) ((l * ((x - m)/s)^(-1 + 1/g)) * (1 + ((x - m)/s)^(1/g))^(-1-l))/(g * s)
curve(dpareto(x, 1, 1, 0.7, 5), 5, 10)
curve(dpareto(x, 1, 1, 1, 5), 5, 10)
source('C:/temp/propagate/R/fitDistr.R', echo=TRUE)
res <- fitDistr(X, nbin = 100)
X <- rnorm(10000, 2, 5)
res <- fitDistr(X, nbin = 100)
dpareto
rpareto <- function(n, s = 1, l = 1, g = 1, m = 1) {
RUNIF <- runif(n)
m + (-1 + (1 - RUNIF)^(-1/l))^g * s
}
rpareto <- function(n, s = 1, l = 1, g = 1, m = 1) {
RUNIF <- runif(n)
m + (-1 + (1 - RUNIF)^(-1/l))^g * s
}
X <- rpareto(1000000, 1, 1, 0.5, 5)
hist(X)
hist(X, breaks = 1000, xlim = c(5, 10))
hist(X, breaks = 10000, xlim = c(5, 10))
hist(X, breaks = 100000, xlim = c(5, 10))
X <- rpareto(1000000, 1, 1, 0.5, 5)
res <- fitDistr(X, nbin = 100)
res <- fitDistr(X, nbin = 10000)
res <- fitDistr(X, nbin = 1000)
res$stat
res <- fitDistr(X, nbin = 200)
source('C:/temp/propagate/R/fitDistr.R', echo=TRUE)
X <- rchi(10000, 12)
res <- fitDistr(X, nbin = 200)
X <- rchisq(10000, 15)
res <- fitDistr(X, nbin = 200)
res$stat
ls()
res$stat
names(res)
names(res)
res <- fitDistr(X, nbin = 200)
gc()
dinvchisq <- function(x, nu) x^(-1 - nu/2)/((2^(nu/2) * gamma(nu/2)) * exp(1/(2 x)))
dinvchisq <- function(x, nu) x^(-1 - nu/2)/((2^(nu/2) * gamma(nu/2)) * exp(1/(2 * x)))
curve(dinvchisq(x, 2), 0, 4)
source('C:/temp/propagate/R/fitDistr.R', echo=TRUE)
source('C:/temp/propagate/R/fitDistr.R', echo=TRUE)
res <- fitDistr(X, nbin = 200)
rchi <- function(n, nu = 5) replicate(n, sqrt(sum(rnorm(nu)^2)))
X <- rchi(100000, 5)
res <- fitDistr(X, nbin = 200)
X <- sqrt(rchisq(100000, 5))
res <- fitDistr(X, nbin = 200)
rchi <- function(n, nu = 5) sqrt(rchisq(n, nu))
X <- rchi(100000, 5)
res <- fitDistr(X, nbin = 200)
install.packages("UCS")
rinvchisq <- function(n, nu = 5) 1/rgamma(n, shape = nu/2, scale = 1/2)
X <- rinvchisq(100000, 5)
hist(X)
res <- fitDistr(X, nbin = 200)
rinvchisq <- function(n, nu = 5) 1/rgamma(n, shape = nu/2, scale = 1/2)
X <- rinvchisq(1000000, 5)
res <- fitDistr(X, nbin = 500)
res$stat
rinvchisq <- function(n, nu = 5) 1/rgamma(n, shape = nu/2, rate = 1/2)
X <- rinvchisq(1000000, 5)
hist(X)
rinvchisq <- function(n, nu = 5) 1/rgamma(n, shape = nu/2, rate = 1/2)
X <- rinvchisq(1000000, 5)
res <- fitDistr(X, nbin = 500)
res$stat
X <- rinvchisq(1000000, 1.5)
res <- fitDistr(X, nbin = 500)
res$stat
rgamma
X <- rinvchisq(1000000, 1.5)
hist(X, breaks = 1000)
X <- rinvchisq(1000000, 2)
hist(X, breaks = 1000, xlim = c(0, 4))
hist(X, breaks = 10000, xlim = c(0, 4))
hist(X, breaks = 100000, xlim = c(0, 4))
X <- rinvchisq(10000000, 2)
hist(X, breaks = 100000, xlim = c(0, 4))
gamma
Gamma
gamma
?gamma
gamma(2)
gamma(5)
gamma(5)
gamma(10)
gamma(6)
1*2*3*4*5*6
1*2*3*4*5
gamma(6)
rinvchisq <- function(n, nu = 5) 1/rchisq(n, nu)
X <- rinvchisq(10000000, 2)
X <- rinvchisq(1000000, 2)
hist(X, breaks = 100000, xlim = c(0, 4))
res <- fitDistr(X, nbin = 500)
X <- rinvchisq(1000000, 2)
res <- fitDistr(X, nbin = 5000)
res <- fitDistr(X, nbin = 1000)
source('C:/temp/propagate/R/fitDistr.R', echo=TRUE)
res <- fitDistr(X, nbin = 200)
X <- rinvchisq(1000000, 2)
res$stat
dcosine <- function(x, mu, sigma) (1 + cos((pi * (x - mu))/sigma))/(2 * sigma)
curve(dcosine(x, 1.5, 1.5), 0, 5)
acos
rcosine <- function(n, mu = 5, sigma = 1) (m * pi - s * (-acos(-1 + 2 * s * runif(n)) + 2 * pi))/pi
X <- rcosine(1000000, 1.5, 1.5)
rcosine <- function(n, mu = 5, sigma = 1) (mu * pi - sigma * (-acos(-1 + 2 * sigma * runif(n)) + 2 * pi))/pi
X <- rcosine(1000000, 1.5, 1.5)
X
hist(X)
rcosine <- function(n, mu = 5, sigma = 1) (mu * pi - sigma * (-acos(-1 + 2 * sigma * runif(n)) + 2 * pi))/pi
X <- rcosine(1000000, 5, 2)
hist(X)
rcosine <- function(n, mu = 5, sigma = 1) (mu * pi - sigma * (acos(-1 + 2 * sigma * runif(n)) + 2 * pi))/pi
X <- rcosine(1000000, 5, 2)
hist(X)
rcosine <- function(n, mu = 10, sigma = 1) (mu * pi - sigma * (acos(-1 + 2 * sigma * runif(n)) + 2 * pi))/pi
X <- rcosine(1000000, 5, 2)
rcosine <- function(n, mu = 10, sigma = 1) (mu * pi - sigma * (acos(-1 + 2 * sigma * runif(n)) + 2 * pi))/pi
rcosine <- function(n, mu = 5, sigma = 1) (mu * pi - sigma * (acos(-1 + 2 * sigma * runif(n)) + 2 * pi))/pi
X <- rcosine(1000000, 5, 2)
hist(X)
hist(X, breaks = 100)
X <- rcosine(1000000, 10, 2)
hist(X, breaks = 100)
X <- rcosine(1000000, 15, 2)
hist(X, breaks = 100)
rcosine <- function(n, mu = 5, sigma = 1) (mu * pi - sigma * (-acos(-1 + 2 * sigma * runif(n)) + 2 * pi))/pi
X <- rcosine(1000000, 10, 2)
hist(X, breaks = 100)
rcosine <- function(n, mu = 5, sigma = 1)
{
OUT <- numeric(n)
LOWER <- mu - 1.5 * sigma
UPPER <- mu + 1.5 * sigma
POS1 <- 1
nSAMPLE <- 0
N <- n
maxDUNIF <- 1/(UPPER - LOWER)
while(nSAMPLE < n) {
## (1) sample from rectangular distribution
u <- runif(N)
## (2) Sample from enveloping rectangular distribution from mu - pi/mu + pi
x <- runif(N, LOWER, UPPER)
## (3) calculate scaling factor
DCOSINE <- (1 + cos((pi * (x - mu))/sigma))/(2 * sigma)
if (nSAMPLE == 0) {
maxDGTRAP <- max(DGTRAP, na.rm = TRUE)
A <- 1.1 * maxDGTRAP/maxDUNIF
}
## (4) Accept candidate value, if probability u is smaller or equal than the density g(x)
## at x divided by the density of f(x) * A (scale)
VAL <- 1/A * DGTRAP/maxDUNIF
SEL <- x[u <= VAL]
## (5) fill result vector and increase start position,
## calculate ratio of true events
LEN <- length(SEL)
if (nSAMPLE == 0) RATIO <- N/LEN/10
nSAMPLE <- nSAMPLE + LEN
POS2 <- POS1 + LEN - 1
OUT[POS1:POS2] <- SEL
POS1 <- POS2 + 1
## if n(events) < n, restart with ratio as factor
if (nSAMPLE < n) N <- RATIO * n
}
return(OUT[1:n])
}
rcosine <- function(n, mu = 5, sigma = 1)
{
OUT <- numeric(n)
LOWER <- mu - 1.5 * sigma
UPPER <- mu + 1.5 * sigma
POS1 <- 1
nSAMPLE <- 0
N <- n
maxDUNIF <- 1/(UPPER - LOWER)
while(nSAMPLE < n) {
## (1) sample from rectangular distribution
u <- runif(N)
## (2) Sample from enveloping rectangular distribution from mu - pi/mu + pi
x <- runif(N, LOWER, UPPER)
## (3) calculate scaling factor
DCOSINE <- (1 + cos((pi * (x - mu))/sigma))/(2 * sigma)
if (nSAMPLE == 0) {
maxDGTRAP <- max(DGTRAP, na.rm = TRUE)
A <- 1.1 * maxDGTRAP/maxDUNIF
}
## (4) Accept candidate value, if probability u is smaller or equal than the density g(x)
## at x divided by the density of f(x) * A (scale)
VAL <- 1/A * DGTRAP/maxDUNIF
SEL <- x[u <= VAL]
## (5) fill result vector and increase start position,
## calculate ratio of true events
LEN <- length(SEL)
if (nSAMPLE == 0) RATIO <- N/LEN/10
nSAMPLE <- nSAMPLE + LEN
POS2 <- POS1 + LEN - 1
OUT[POS1:POS2] <- SEL
POS1 <- POS2 + 1
## if n(events) < n, restart with ratio as factor
if (nSAMPLE < n) N <- RATIO * n
}
return(OUT[1:n])
}
X <- rcosine(10000, 5, 2)
rcosine <- function(n, mu = 5, sigma = 1)
{
OUT <- numeric(n)
LOWER <- mu - 1.5 * sigma
UPPER <- mu + 1.5 * sigma
POS1 <- 1
nSAMPLE <- 0
N <- n
maxDUNIF <- 1/(UPPER - LOWER)
while(nSAMPLE < n) {
## (1) sample from rectangular distribution
u <- runif(N)
## (2) Sample from enveloping rectangular distribution from mu - pi/mu + pi
x <- runif(N, LOWER, UPPER)
## (3) calculate scaling factor
DCOSINE <- (1 + cos((pi * (x - mu))/sigma))/(2 * sigma)
if (nSAMPLE == 0) {
maxDCOSINE <- max(DCOSINE, na.rm = TRUE)
A <- 1.1 * maxDCOSINE/maxDUNIF
}
## (4) Accept candidate value, if probability u is smaller or equal than the density g(x)
## at x divided by the density of f(x) * A (scale)
VAL <- 1/A * DCOSINE/maxDUNIF
SEL <- x[u <= VAL]
## (5) fill result vector and increase start position,
## calculate ratio of true events
LEN <- length(SEL)
if (nSAMPLE == 0) RATIO <- N/LEN/10
nSAMPLE <- nSAMPLE + LEN
POS2 <- POS1 + LEN - 1
OUT[POS1:POS2] <- SEL
POS1 <- POS2 + 1
## if n(events) < n, restart with ratio as factor
if (nSAMPLE < n) N <- RATIO * n
}
return(OUT[1:n])
}
X <- rcosine(10000, 5, 2)
X
hist(X, breaks = 100)
rcosine <- function(n, mu = 5, sigma = 1)
{
OUT <- numeric(n)
LOWER <- mu - sigma
UPPER <- mu + sigma
POS1 <- 1
nSAMPLE <- 0
N <- n
maxDUNIF <- 1/(UPPER - LOWER)
while(nSAMPLE < n) {
## (1) sample from rectangular distribution
u <- runif(N)
## (2) Sample from enveloping rectangular distribution from mu - pi/mu + pi
x <- runif(N, LOWER, UPPER)
## (3) calculate scaling factor
DCOSINE <- (1 + cos((pi * (x - mu))/sigma))/(2 * sigma)
if (nSAMPLE == 0) {
maxDCOSINE <- max(DCOSINE, na.rm = TRUE)
A <- 1.1 * maxDCOSINE/maxDUNIF
}
## (4) Accept candidate value, if probability u is smaller or equal than the density g(x)
## at x divided by the density of f(x) * A (scale)
VAL <- 1/A * DCOSINE/maxDUNIF
SEL <- x[u <= VAL]
## (5) fill result vector and increase start position,
## calculate ratio of true events
LEN <- length(SEL)
if (nSAMPLE == 0) RATIO <- N/LEN/10
nSAMPLE <- nSAMPLE + LEN
POS2 <- POS1 + LEN - 1
OUT[POS1:POS2] <- SEL
POS1 <- POS2 + 1
## if n(events) < n, restart with ratio as factor
if (nSAMPLE < n) N <- RATIO * n
}
return(OUT[1:n])
}
X <- rcosine(10000, 5, 2)
hist(X, breaks = 100)
X <- rcosine(1000000, 5, 2)
hist(X, breaks = 100)
source('C:/temp/propagate/R/distr-densities.R', echo=TRUE)
source('C:/temp/propagate/R/distr-densities.R', echo=TRUE)
source('C:/temp/propagate/R/fitDistr.R', echo=TRUE)
X <- rcosine(1000000, 5, 2)
res <- fitDistr(X, nbin = 200)
res <- fitDistr(X, nbin = 200)
traceback()
source('C:/temp/propagate/R/fitDistr.R', echo=TRUE)
res <- fitDistr(X, nbin = 200)
res$stat
X <- rcosine(10000, 5, 2)
res <- fitDistr(X, nbin = 200)
X <- rcosine(1000000, 5, 2)
res <- fitDistr(X, nbin = 200)
X <- rcosine(10000000, 5, 2)
res <- fitDistr(X, nbin = 200)
X <- propagate:::rmises(100000, mu = 10, kappa = 3)
fitDistr(X)
source('C:/temp/propagate/R/utils.R', echo=TRUE)
fitDistr(X)
res <- fitDistr(X)
res
res$stat
source('C:/temp/propagate/R/distr-samplers.R', echo=TRUE)
X <- propagate:::rmises(100000, mu = 10, kappa = 3)
hist(X)
hist(X, breaks = 100)
X <- propagate:::rmises(100000, mu = 10, kappa = 1)
hist(X, breaks = 100)
X <- propagate:::rmises(1000000, mu = 10, kappa = 1)
fitDistr(X)
res$stat
source('C:/temp/propagate/R/fitDistr.R', echo=TRUE)
source('C:/temp/propagate/R/fitDistr.R', echo=TRUE)
fitDistr(X. nbin = 500)
fitDistr(X, nbin = 500)
besselI
?besselI
X <- rmises(1000000, mu = 1, kappa = 3)
hist(X, breaks = 1000)
curve(dmises(x, 1, 3), -2, 2, col = red, add = T)
curve(dmises(x, 1, 3), -2, 2, col = "red", add = T)
hist(X, breaks = 1000, freq = F)
curve(dmises(x, 1, 3), -2, 2, col = "red", add = T)
curve(dmises(x, 1, 3), -2, 2, col = "red", add = T, lwd = 5)
curve(dmises(x, 1, 3), -2, 4, col = "red", add = T, lwd = 5)
source('C:/temp/propagate/R/distr-samplers.R', echo=TRUE)
source('C:/temp/propagate/R/distr-densities.R', echo=TRUE)
hist(X, breaks = 1000, freq = F)
X <- rmises(1000000, mu = 1, kappa = 2)
res <- fitDistr(X, nbin = 500)
res <- fitDistr(X, nbin = 100)
X <- propagate:::rmises(1000000, mu = 10, kappa = 1)
fitDistr(X)
curve(dmises(x, 10, 1), 7, 13, col = "orange", lwd = 2, add = T)
curve(dmises(x, 10, 1), 10-pi, 13+pi, col = "orange", lwd = 2, add = T)
fitDistr(X, nbin = 100)
res$stat
source('C:/temp/propagate/R/utils.R', echo=TRUE)
res$stat
fitDistr(X, nbin = 100)
fitDistr(X, nbin = 200)
fitDistr(X, nbin = 500)
source('C:/temp/propagate/R/fitDistr.R', echo=TRUE)
fitDistr(X, nbin = 100)
source('C:/temp/propagate/R/distr-samplers.R', echo=TRUE)
X <- rmises(1000000, mu = 1, kappa = 2)
hist(X, breaks = 200, freq = F)
source('C:/temp/propagate/R/distr-densities.R', echo=TRUE)
X <- rmises(1000000, mu = 1, kappa = 2)
hist(X, breaks = 200, freq = F)
X <- rmises(1000000, mu = 1, kappa = 2)
hist(X, breaks = 200, freq = F)
X
sum(is.na(X))
X <- rmises(1000000, mu = 1, kappa = 2)
X
source('C:/temp/propagate/R/distr-densities.R', echo=TRUE)
X <- rmises(1000000, mu = 1, kappa = 2)
hist(X, breaks = 200, freq = F)
source('C:/temp/propagate/R/distr-densities.R', echo=TRUE)
X <- rmises(1000000, mu = 1, kappa = 2)
source('C:/temp/propagate/R/distr-densities.R', echo=TRUE)
X <- rmises(1000000, mu = 1, kappa = 2)
hist(X, breaks = 200, freq = F)
curve(dmises(x, 1, 2), -3, 5, add = T)
fitDistr(X, nbin = 200)
X <- rmises(1000000, mu = 1, kappa = 2)
fitDistr(X, nbin = 200)
source('C:/temp/propagate/R/utils.R', echo=TRUE)
source('C:/temp/propagate/R/utils.R', echo=TRUE)
source('C:/temp/propagate/R/utils.R', echo=TRUE)
fitDistr(X, nbin = 400)
source('C:/temp/propagate/R/fitDistr.R', echo=TRUE)
system.time(fitDistr(X, nbin = 400))
fitDistr(X, nbin = 500)
system.time(fitDistr(X, nbin = 1000))
system.time(fitDistr(X, nbin = 1000))
BIC.logLik
stats:::BIC.logLik
stats:::AIC.logLik
res <- fitDistr(X, nbin = 500)
res <- fitDistr(X, nbin = 500, plot = "qq")
X <- rmises(1000, 2, )
X <- rmises(1000, 2, )
X <- rmises(1000, 2, )
X <- rmises(1000, 2, 3)
X
res <- fitDistr(X, nbin = 50, plot = "qq")
names(red)
names(res)
res$stat
res$fit
names(res)
res$par
names(res)
res$dens
source('C:/temp/propagate/R/fitDistr.R', echo=TRUE)
res <- fitDistr(X, nbin = 50, plot = "qq")
names(res)
res$dens
names(res)
res$bestfit
source('C:/temp/propagate/R/utils.R', echo=TRUE)
source('C:/temp/propagate/R/utils.R', echo=TRUE)
res <- fitDistr(X, nbin = 50, plot = "qq")
res
source('C:/temp/propagate/R/utils.R', echo=TRUE)
res <- fitDistr(X, nbin = 50, plot = "qq")
res
source('C:/temp/propagate/R/utils.R', echo=TRUE)
res <- fitDistr(X, nbin = 50, plot = "qq")
res
source('C:/temp/propagate/R/utils.R', echo=TRUE)
res
res <- fitDistr(X, nbin = 50, plot = "qq")
res
names(res)
source('C:/temp/propagate/R/fitDistr.R', echo=TRUE)
res <- fitDistr(X, nbin = 50, plot = "qq")
res$bestpar
res$bestse
## Linear example, small error
## => family of normal distributions.
EXPR1 <- expression(x + 2 * y)
x <- c(5, 0.01)
y <- c(1, 0.01)
DF1 <- cbind(x, y)
RES1 <- propagate(expr = EXPR1, data = DF1, type = "stat",
do.sim = TRUE, verbose = TRUE)
fitDistr(RES1)
EXPR2 <- expression(x/2 * y)
x <- c(5, 0.1)
y <- c(1, 0.02)
DF2 <- cbind(x, y)
RES2 <- propagate(expr = EXPR2, data = DF2, type = "stat",
do.sim = TRUE, verbose = TRUE)
fitDistr(RES2)
res$stat
RES2$stat
EXPR2 <- expression(x/2 * y)
x <- c(5, 0.1)
y <- c(1, 0.02)
DF2 <- cbind(x, y)
RES2 <- propagate(expr = EXPR2, data = DF2, type = "stat",
do.sim = TRUE, verbose = TRUE)
res <-fitDistr(RES2)
res$stat
EXPR3 <- expression(x^(2 * y))
x <- c(5, 0.1)
y <- c(1, 0.1)
DF3 <- cbind(x, y)
RES3 <- propagate(expr = EXPR3, data = DF3, type = "stat",
do.sim = TRUE, verbose = TRUE)
fitDistr(RES3)
EXPR3 <- expression(x^(2 * y))
x <- c(5, 0.1)
y <- c(1, 0.1)
DF3 <- cbind(x, y)
RES3 <- propagate(expr = EXPR3, data = DF3, type = "stat",
do.sim = TRUE, verbose = TRUE)
res <- fitDistr(RES3)
res$stat
EXPR3 <- expression(x^(2 * y))
x <- c(5, 0.1)
y <- c(1, 0.1)
DF3 <- cbind(x, y)
RES3 <- propagate(expr = EXPR3, data = DF3, type = "stat",
do.sim = TRUE, verbose = TRUE)
fitDistr(RES3)
A <- runif(100000, 20, 25)
B <- runif(100000, 3, 3.5)
DF4 <- cbind(A, B)
EXPR4 <- expression(A + B)
RES4 <- propagate(EXPR4, data = DF4, type = "sim",
use.cov = FALSE, do.sim = TRUE)
fitDistr(RES4)
EXPR5 <- expression(x + 2 * y)
x <- c(5, 0.05)
y <- c(1, 0.05)
DF5 <- cbind(x, y)
RES5 <- propagate(expr = EXPR5, data = DF5, type = "stat",
do.sim = TRUE, verbose = TRUE, weights = TRUE)
fitDistr(RES5)
